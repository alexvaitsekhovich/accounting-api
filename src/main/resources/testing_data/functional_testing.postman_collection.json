{
	"info": {
		"_postman_id": "9d642ab2-4425-4d05-96a9-1c1039476ea6",
		"name": "accounting api functional testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create user - success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.globals.set(\"newUserPublicId\", pm.response.json().publicId);",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId.length).to.eql(40);",
							"    pm.expect(userData.firstName).to.eql(\"Fresh\");",
							"    pm.expect(userData.lastName).to.eql(\"Man\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Fresh\",\n    \"lastName\" : \"Man\",\n    \"email\" : \"fresh.man@api.com\",\n    \"password\" : \"password-123\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with existing email - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(409);",
							"    pm.expect(messageDetails.details.messages[0]).to.include(\"is already registered\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"CONFLICT\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Old\",\n    \"lastName\" : \"Man\",\n    \"email\" : \"fresh.man@api.com\",\n    \"password\" : \"password-123\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user without token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.status).to.eql(403);",
							"    pm.expect(message.error).to.eql(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					},
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users without token - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.status).to.eql(403);",
							"    pm.expect(message.error).to.eql(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user without token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.status).to.eql(403);",
							"    pm.expect(message.error).to.eql(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Bob\",\n    \"lastName\" : \"Ross\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user without token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.status).to.eql(403);",
							"    pm.expect(message.error).to.eql(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User login with wrong credentials - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"fresh.man@api.com\",\n    \"password\" : \"wrongpass\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/gettoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gettoken"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User login with correct credentials, another user - success, save token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get authorization header\", function() {",
							"    let jwtToken = pm.response.headers.get(\"Authorization\")",
							"    pm.globals.set(\"jwtToken\", jwtToken);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"john.doe1@api.com\",\n    \"password\" : \"user-pass\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/gettoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gettoken"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user with user token, another user - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all invoices from user without invoices - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(pm.response.json()._embedded).to.eql(undefined);",
							"    pm.expect(Object.keys(pm.response.json()._links).length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single invoice, wrong user - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.details.status).to.eql(403);",
							"    pm.expect(message.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(message.httpStatus).to.eql(\"FORBIDDEN\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice/11111111111111111111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice",
						"11111111111111111111"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get positions of an invoice, wrong user - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.details.status).to.eql(403);",
							"    pm.expect(message.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(message.httpStatus).to.eql(\"FORBIDDEN\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice/11111111111111111111/positions",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice",
						"11111111111111111111",
						"positions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get unbilled positions, no positions found - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(pm.response.json()).to.eql({});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/position/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single billed position, wrong user - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.details.status).to.eql(403);",
							"    pm.expect(message.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(message.httpStatus).to.eql(\"FORBIDDEN\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/position/40",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						"40"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single unbilled position, wrong user - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.details.status).to.eql(403);",
							"    pm.expect(message.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(message.httpStatus).to.eql(\"FORBIDDEN\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/position/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users with user token another user - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.details.status).to.eql(500);",
							"    pm.expect(message.responseState).to.eql(\"FAILURE\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate invoice, wrong user - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.details.status).to.eql(404);",
							"    pm.expect(message.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(message.httpStatus).to.eql(\"NOT_FOUND\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice/generate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice",
						"generate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user with user token another useer - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Bob\",\n    \"lastName\" : \"Ross\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user with user token another user - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User login with correct credentials - success, save token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get authorization header\", function() {",
							"    let jwtToken = pm.response.headers.get(\"Authorization\")",
							"    pm.globals.set(\"jwtToken\", jwtToken);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"fresh.man@api.com\",\n    \"password\" : \"password-123\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/gettoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gettoken"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user with user token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId).to.eql(pm.globals.get(\"newUserPublicId\"));",
							"    pm.expect(userData.firstName).to.eql(\"Fresh\");",
							"    pm.expect(userData.lastName).to.eql(\"Man\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users with user token - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user with user token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId).to.eql(pm.globals.get(\"newUserPublicId\"));",
							"    pm.expect(userData.firstName).to.eql(\"Bob\");",
							"    pm.expect(userData.lastName).to.eql(\"Ross\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Bob\",\n    \"lastName\" : \"Ross\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user with user token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin login with correct credentials - success, save token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get authorization header\", function() {",
							"    let jwtToken = pm.response.headers.get(\"Authorization\")",
							"    pm.globals.set(\"jwtToken\", jwtToken);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"admin@api.com\",\n    \"password\" : \"admin-pass\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/gettoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gettoken"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user with admin token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId).to.eql(pm.globals.get(\"newUserPublicId\"));",
							"    pm.expect(userData.firstName).to.eql(\"Bob\");",
							"    pm.expect(userData.lastName).to.eql(\"Ross\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				},
				"description": "Get user data"
			},
			"response": []
		},
		{
			"name": "Get all users with admin token - success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let users = pm.response.json()._embedded.users;",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(users).length).to.eql(6);",
							"    pm.expect(Object.keys(pm.response.json()._links).length).to.eql(1);",
							"    pm.expect(users[0].lastName).to.eql(\"Admin\");",
							"",
							"    for (i = 1, len = users.length; i < len; i++) {",
							"        pm.expect(users[i].firstName).to.eql(\"John\");",
							"        pm.expect(users[i].lastName).to.eql(\"Doe\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get  users with admin token - success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let users = pm.response.json()._embedded.users;",
							"",
							"console.log(users[0]);",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(users).length).to.eql(13);",
							"    pm.expect(Object.keys(pm.response.json()._links).length).to.eql(1);",
							"    pm.expect(users[0].lastName).to.eql(\"Admin\");",
							"",
							"    for (i = 1, len = users.length - 1; i < len; i++) {",
							"        pm.expect(users[i].firstName).to.eql(\"John\");",
							"        pm.expect(users[i].lastName).to.eql(\"Doe\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user with admin token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId).to.eql(pm.globals.get(\"newUserPublicId\"));",
							"    pm.expect(userData.firstName).to.eql(\"Nobody\");",
							"    pm.expect(userData.lastName).to.eql(\"Exaybachay\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Nobody\",\n    \"lastName\" : \"Exaybachay\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user with admin token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test message data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(200);",
							"    pm.expect(messageDetails.responseState).to.eql(\"SUCCESS\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete not found user with admin token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(400);",
							"    pm.expect(messageDetails.details.messages[0]).to.contain(\"No user found with public id\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"BAD_REQUEST\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User login for user with invoices - success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get authorization header\", function() {",
							"    let jwtToken = pm.response.headers.get(\"Authorization\")",
							"    pm.globals.set(\"jwtToken\", jwtToken);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"john.doe11@api.com\",\n    \"password\" : \"user-pass\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/gettoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gettoken"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all invoices from user with invoices - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let invoices = pm.response.json()._embedded.invoices;",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(invoices).length).to.eql(4);",
							"    pm.expect(Object.keys(pm.response.json()._links).length).to.eql(1);",
							"",
							"    for (i = 1, len = invoices.length; i < len; i++) {",
							"        pm.expect(invoices[i].state).to.eql(\"OPEN\");",
							"        pm.expect(invoices[i].number.length).to.eql(20);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all invoices from user, pagination - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let invoices = pm.response.json()._embedded.invoices;",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(invoices).length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice?page=0&size=2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all invoices from user, pagination 2 - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let invoices = pm.response.json()._embedded.invoices;",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(invoices).length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice?page=1&size=3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single invoice - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let invoiceData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(invoiceData).length).to.eql(5);",
							"    pm.expect(Object.keys(invoiceData._links).length).to.eql(2);",
							"});",
							"",
							"",
							"pm.test(\"Test invoice data\", function () {",
							"    pm.expect(invoiceData.number).to.eql(\"11111111111111111111\");",
							"    pm.expect(invoiceData.state).to.eql(\"OPEN\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice/11111111111111111111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice",
						"11111111111111111111"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get positions of an invoice - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let positionsData = pm.response.json()._embedded.positions;",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(positionsData).length).to.eql(20);",
							"",
							"    for (i = 1, len = positionsData.length; i < len; i++) {",
							"        pm.expect(positionsData[i].payment).to.eql('cash');",
							"        pm.expect(positionsData[i].invoiceNumber).to.eql('11111111111111111111');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice/11111111111111111111/positions",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice",
						"11111111111111111111",
						"positions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get unbilled positions - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let positionsData = pm.response.json()._embedded.positions;",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(positionsData).length).to.eql(10);",
							"",
							"    for (i = 1, len = positionsData.length; i < len; i++) {",
							"        pm.expect(positionsData[i].payment).to.eql(\"cash\");",
							"        pm.expect(positionsData[i].invoiceNumber).to.eql(null);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/position/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single billed position - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let position = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(position).length).to.eql(7);",
							"    pm.expect(Object.keys(position._links).length).to.eql(1);",
							"});",
							"",
							"pm.test(\"Test position data\", function () {",
							"    pm.expect(position.id).to.eql(1);",
							"    pm.expect(position.payment).to.eql('cash');",
							"    pm.expect(position.invoiceNumber).to.eql('11111111111111111111');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/position/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single unbilled position - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let position = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(position).length).to.eql(6);",
							"    pm.expect(position._links).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Test position data\", function () {",
							"    pm.expect(position.id).to.eql(40);",
							"    pm.expect(position.payment).to.eql('cash');",
							"    pm.expect(position.invoiceNumber).to.eql(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/position/40",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						"40"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate invoice - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let invoiceData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(invoiceData).length).to.eql(5);",
							"    pm.expect(Object.keys(invoiceData._links).length).to.eql(2);",
							"});",
							"",
							"",
							"pm.test(\"Test invoice data\", function () {",
							"    pm.expect(invoiceData.state).to.eql(\"OPEN\");",
							"    pm.expect(invoiceData.amount).to.eql(1045);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/invoice/generate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"invoice",
						"generate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get unbilled positions after invoice generation - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.response.json());",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(pm.response.json()).to.eql({});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/position/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create position bad data - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(400);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Label is mandatory\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"BAD_REQUEST\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\" : 666,\n    \"payment\" : \"PAYPAL\",\n    \"customerId\" : 4\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/position/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create position bad data 2 - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(400);",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"BAD_REQUEST\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\" : 666,\n    \"payment\" : \"A\",\n    \"customerId\" : 4,\n    \"label\": \"Test position\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/position/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create position - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"let positionData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(positionData).length).to.eql(7);",
							"    pm.expect(Object.keys(positionData._links).length).to.eql(1);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(positionData.amount).to.eql(666);",
							"    pm.expect(positionData.payment).to.eql('paypal');",
							"    pm.expect(positionData.label).to.eql('Test position');",
							"    pm.expect(positionData.customerId).to.eql(4);",
							"    pm.expect(positionData.invoiceNumber).to.eql(null);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\" : 666,\n    \"payment\" : \"payPAL\",\n    \"customerId\" : 4,\n    \"label\": \"Test position\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/position/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get valid position payments - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let paymentsData = pm.response.json();",
							"",
							"pm.test(\"Test payment types\", function () {",
							"    pm.expect(pm.response.json()).to.eql([\"cash\",\"credit\",\"paypal\",\"voucher\"]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\" : 666,\n    \"payment\" : \"payPAL\",\n    \"customerId\" : 4,\n    \"label\": \"Test position\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/position/payments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"position",
						"payments"
					]
				}
			},
			"response": []
		}
	]
}