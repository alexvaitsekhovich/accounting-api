{
	"info": {
		"_postman_id": "79e31213-62b8-465c-89df-8c826e49155c",
		"name": "accounting api functional testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create user - success",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a3dfbc7-0cde-4c7e-9f07-31458f5715fb",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.globals.set(\"newUserPublicId\", pm.response.json().publicId);",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId.length).to.eql(40);",
							"    pm.expect(userData.firstName).to.eql(\"Fresh\");",
							"    pm.expect(userData.lastName).to.eql(\"Man\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Fresh\",\n    \"lastName\" : \"Man\",\n    \"email\" : \"fresh.man@api.com\",\n    \"password\" : \"password-123\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with existing email - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4b223d39-9269-401e-9f0c-d032ab85f97a",
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(409);",
							"    pm.expect(messageDetails.details.messages[0]).to.include(\"is already registered\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"CONFLICT\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Old\",\n    \"lastName\" : \"Man\",\n    \"email\" : \"fresh.man@api.com\",\n    \"password\" : \"password-123\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user without token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1b08307e-d0e4-4fc2-8f30-a4902e1dd7fd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "243b682a-90d2-41d5-9a92-63efc94df560",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.status).to.eql(403);",
							"    pm.expect(message.error).to.eql(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					},
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users without token - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "53d353d7-0c08-404e-9e8d-f7a632ecceec",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.status).to.eql(403);",
							"    pm.expect(message.error).to.eql(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0edb499c-7803-494b-9401-2f1bcfb6f9b4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user without token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "23c21bd2-4171-4759-b89b-5de71da20723",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9cca9a3c-bb80-4f8e-b3f4-08f4990340bd",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.status).to.eql(403);",
							"    pm.expect(message.error).to.eql(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Bob\",\n    \"lastName\" : \"Ross\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user without token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "01be0f7c-d719-4d42-b654-dfb46084dcff",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "033e8b4d-c8ac-4ab9-8fd5-5e15e05fb0a0",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let message = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(message.status).to.eql(403);",
							"    pm.expect(message.error).to.eql(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User login with wrong credentials - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae9b0038-bf34-4a98-8748-f73e235d85f3",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"fresh.man@api.com\",\n    \"password\" : \"wrongpass\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/gettoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gettoken"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User login with correct credentials, another user - success, save token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a71578c-bede-4a48-9709-dad0a818d873",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get authorization header\", function() {",
							"    let jwtToken = pm.response.headers.get(\"Authorization\")",
							"    pm.globals.set(\"jwtToken\", jwtToken);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"john.doe1@api.com\",\n    \"password\" : \"user-pass\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/gettoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gettoken"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user with user token, another user - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "acab80ae-35f1-4878-ba76-d71c2a701512",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ca8cdfc0-f70e-4160-9917-adc83ed7ad03",
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users with user token another user - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2dea8a4a-fe63-4be0-91e6-d5b5f84cccbf",
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6930b8f8-732f-42b1-8fb6-1e6de8e646f4",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user with user token another useer - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c181f44c-5d98-457b-b585-2267a3408091",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f91962ba-ae4a-4f12-8cad-a30df0a16b7f",
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Bob\",\n    \"lastName\" : \"Ross\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user with user token another user - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "af04c181-1cc2-4886-9a98-7fe7f7fa1f75",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b701e3b6-5ef9-4cb4-b95f-2de6ad8b004b",
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User login with correct credentials - success, save token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7afcb35-9ece-495a-b57c-569838966610",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get authorization header\", function() {",
							"    let jwtToken = pm.response.headers.get(\"Authorization\")",
							"    pm.globals.set(\"jwtToken\", jwtToken);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"fresh.man@api.com\",\n    \"password\" : \"password-123\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/gettoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gettoken"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user with user token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3b670fe0-a8c6-4135-aabf-e4e9fd266a69",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2a800acb-debb-4497-986b-41f64b76bc50",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId).to.eql(pm.globals.get(\"newUserPublicId\"));",
							"    pm.expect(userData.firstName).to.eql(\"Fresh\");",
							"    pm.expect(userData.lastName).to.eql(\"Man\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users with user token - failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f237dd4e-5c43-437c-83f5-7d230c7dec63",
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "70e02f02-5246-4571-9725-5365fcfbb455",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user with user token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a85cdbef-8b1b-4b21-b450-74b06c61d1b7",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "21586d31-2115-49a4-8806-953f229e1305",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId).to.eql(pm.globals.get(\"newUserPublicId\"));",
							"    pm.expect(userData.firstName).to.eql(\"Bob\");",
							"    pm.expect(userData.lastName).to.eql(\"Ross\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Bob\",\n    \"lastName\" : \"Ross\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user with user token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f1296da5-d90d-4918-b092-866b61e69068",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ea35229b-ac99-4ee4-8de9-bca8b32af42c",
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(500);",
							"    pm.expect(messageDetails.details.messages[0]).to.eql(\"Access is denied\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"INTERNAL_SERVER_ERROR\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin login with correct credentials - success, save token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7afcb35-9ece-495a-b57c-569838966610",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Get authorization header\", function() {",
							"    let jwtToken = pm.response.headers.get(\"Authorization\")",
							"    pm.globals.set(\"jwtToken\", jwtToken);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\" : \"admin@api.com\",\n    \"password\" : \"admin-pass\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/gettoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"gettoken"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user with admin token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "36785876-064a-4b56-b70b-fb0af08858ed",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "84093ebb-043e-4f1c-bfd9-86d55b2af16b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId).to.eql(pm.globals.get(\"newUserPublicId\"));",
							"    pm.expect(userData.firstName).to.eql(\"Bob\");",
							"    pm.expect(userData.lastName).to.eql(\"Ross\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				},
				"description": "Get user data"
			},
			"response": []
		},
		{
			"name": "Get all users with admin token - success",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3f6c365-b40c-4254-907f-e4e2888082fd",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let users = pm.response.json()._embedded.users;",
							"",
							"console.log(users[0]);",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(users).length).to.eql(6);",
							"    pm.expect(Object.keys(pm.response.json()._links).length).to.eql(1);",
							"    pm.expect(users[0].lastName).to.eql(\"Admin\");",
							"",
							"    for (i = 1, len = users.length; i < len; i++) {",
							"        pm.expect(users[i].firstName).to.eql(\"John\");",
							"        pm.expect(users[i].lastName).to.eql(\"Doe\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "afffa3d0-47a0-411e-86d5-9d64024f1793",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get 100 users with admin token - success",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f6988611-d398-4498-994b-14e7bd754f25",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let users = pm.response.json()._embedded.users;",
							"",
							"console.log(users[0]);",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(users).length).to.eql(13);",
							"    pm.expect(Object.keys(pm.response.json()._links).length).to.eql(1);",
							"    pm.expect(users[0].lastName).to.eql(\"Admin\");",
							"",
							"    for (i = 1, len = users.length - 1; i < len; i++) {",
							"        pm.expect(users[i].firstName).to.eql(\"John\");",
							"        pm.expect(users[i].lastName).to.eql(\"Doe\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "015c748b-0cb0-46d5-b9c2-acd03eb6e390",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user?page=0&size=100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user with admin token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "686fe65c-6c9c-47ac-a8d7-39e17a965f15",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c4a1f64d-e972-420d-bc1b-f8d71fad7182",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let userData = pm.response.json();",
							"",
							"pm.test(\"Test count of fields in objects\", function () {",
							"    pm.expect(Object.keys(userData).length).to.eql(5);",
							"    pm.expect(Object.keys(userData._links).length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Test user data\", function () {",
							"    pm.expect(userData.publicId).to.eql(pm.globals.get(\"newUserPublicId\"));",
							"    pm.expect(userData.firstName).to.eql(\"Nobody\");",
							"    pm.expect(userData.lastName).to.eql(\"Exaybachay\");",
							"    pm.expect(userData.email).to.eql(\"fresh.man@api.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\" : \"Nobody\",\n    \"lastName\" : \"Exaybachay\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user with admin token - success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1040101c-faaa-4ac7-bdd4-1f1ee22d57d7",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d5b615dd-509d-4ae2-8f9f-1561a5b0d2c3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test message data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(200);",
							"    pm.expect(messageDetails.responseState).to.eql(\"SUCCESS\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete not found user with admin token - failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3249f63d-6ebd-42b5-8087-d7866bf6144e",
						"exec": [
							"pm.request.headers.add({",
							"  key: 'Authorization',",
							"  value: pm.globals.get(\"jwtToken\")",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "114a1442-2909-48b4-ae51-81be0181fd10",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"let messageDetails = pm.response.json();",
							"",
							"pm.test(\"Test error data\", function () {",
							"    pm.expect(messageDetails.details.status).to.eql(400);",
							"    pm.expect(messageDetails.details.messages[0]).to.contain(\"No user found with public id\");",
							"    pm.expect(messageDetails.responseState).to.eql(\"FAILURE\");",
							"    pm.expect(messageDetails.httpStatus).to.eql(\"BAD_REQUEST\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/user/{{newUserPublicId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"user",
						"{{newUserPublicId}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}